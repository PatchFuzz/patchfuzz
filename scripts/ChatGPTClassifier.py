import openai
import pandas as pd
import os
import re
import time

os.environ["HTTP_PROXY"] = "http://127.0.0.1:7890"
os.environ["HTTPS_PROXY"] = "http://127.0.0.1:7890"

with open("/data/patchFuzz/scripts/sk.txt", "r") as f:
    sk = f.read()
openai.api_key = sk

def isBugFix(question):
    prompt = "I want you to act as a classifier. I will give you a piece of text generated by command \"git log -m --name-status\". You need to identify the git commit log and determine if it is fixing a bug. If it is, you should answer \"yes\", if not you should answer \"no\",nothing else."
    rsp = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": question}
        ]
    )

    resmessage = rsp['choices'][0]['message']['content']
    return resmessage

def parseCommit(commitLines):
    commits = []
    commit = {}
    for nextLine in commitLines:
        if nextLine == '' or nextLine == '\n':
            pass
        elif bool(re.match('commit', nextLine, re.IGNORECASE)):
            if len(commit) != 0:		## new commit, so re-initialize
                commits.append(commit)
                commit = {}
            commit = {'hash' : re.match('commit (.*)', nextLine, re.IGNORECASE).group(1) }
            commit['ctype']=""
            commit['message'] = nextLine
            ismerge = False        
        else:
            commit['message'] += nextLine
    commits.append(commit)
    return commits

def Evaluate(txt,csv):
    TP=0
    TN=0
    FN=0
    FP=0
    fd=open(txt,"r")
    dics = parseCommit(fd.readlines())
    pf=pd.read_csv(csv,usecols=['hash','ctype','audit','ChatGPT'])
    
    for index,dic in enumerate(dics):
        try:      
            pf.iloc[index,3] = isBugFix(dic["message"])
            #print(pf.iloc[index,2])
            time.sleep(3.1)
        except Exception as e:
            print(e,pf.iloc[index,0])

    pf.to_csv(csv+".chatgpt", index=None)
    for row in pf.itertuples():
        if not bool(re.match('yes', row.ChatGPT, re.IGNORECASE)) and not bool(re.match('no', row.ChatGPT, re.IGNORECASE)):
            print(row.ChatGPT,'\n',row.hash)
        elif bool(re.match('yes', row.ChatGPT, re.IGNORECASE)) and row.audit==1:
            TP+=1
        elif bool(re.match('yes', row.ChatGPT, re.IGNORECASE)) and row.audit==0:
            FP+=1
            #print(row.hash)
        elif bool(re.match('no', row.ChatGPT, re.IGNORECASE)) and row.audit==0:
            TN+=1
        elif bool(re.match('no', row.ChatGPT, re.IGNORECASE)) and row.audit==1:
            FN+=1
        else:
            print("Unhandled")
            print(row.ChatGPT,'\n',row.hash)
        

    
    print('Precision: {:.2f}%'.format(TP/(TP+FP)*100))
    print('Recall: {:.2f}%'.format(TP/(TP+FN)*100))
    print(TP,FP,TN,FN)
if __name__ == '__main__':
    print("JSC:")
    Evaluate("./jsc_message.txt","./sample_jsc.csv.final")



    print("V8:")
    Evaluate("./v8_message.txt","./sample_v8.csv.final")

    print("SP:")
    Evaluate("./sp_message.txt","./sample_sp.csv.final")

    print("CH:")
    Evaluate("./ch_message.txt","./sample_ch.csv.final")
    
    print("Je:")
    Evaluate("./je_message.txt","./sample_je.csv.final")
    # q="""
    # commit 25bb4faaca03882a58c494b657356d8910e3993b
    # Author: Filip Pizlo <fpizlo@apple.com>
    # Date:   Tue Apr 21 23:01:04 2020 +0000q

    #     Unreviewed, check in some more files for a blog post.
        
    #     * blog-files/speculation-in-jsc/clobberize-dependence-graph.graffle:
    #     * blog-files/speculation-in-jsc/clobberize-dependence-graph.svg:
        
        
        
    #     Canonical link: https://commits.webkit.org/223710@main
    #     git-svn-id: https://svn.webkit.org/repository/webkit/trunk@260472 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    # M	Websites/webkit.org/ChangeLog
    # M	Websites/webkit.org/blog-files/speculation-in-jsc/clobberize-dependence-graph.graffle
    # M	Websites/webkit.org/blog-files/speculation-in-jsc/clobberize-dependence-graph.svg
    # """
    # print(isBugFix(q))
