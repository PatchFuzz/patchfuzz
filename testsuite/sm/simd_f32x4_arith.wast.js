






let $0 = instantiate(`(module
  (func (export "f32x4.add") (param v128 v128) (result v128) (f32x4.add (local.get 0) (local.get 1)))
  (func (export "f32x4.sub") (param v128 v128) (result v128) (f32x4.sub (local.get 0) (local.get 1)))
  (func (export "f32x4.mul") (param v128 v128) (result v128) (f32x4.mul (local.get 0) (local.get 1)))
  (func (export "f32x4.div") (param v128 v128) (result v128) (f32x4.div (local.get 0) (local.get 1)))
  (func (export "f32x4.neg") (param v128) (result v128) (f32x4.neg (local.get 0)))
  (func (export "f32x4.sqrt") (param v128) (result v128) (f32x4.sqrt (local.get 0)))
)`);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0, 0, 0, 0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0, 0, 0, 0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0, 0, 0, 0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0, 0, 0, 0]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0, 0, 0, 0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0, 0, 0, 0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-0, -0, -0, -0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-0, -0, -0, -0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-0, -0, -0, -0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-0, -0, -0, -0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-0, -0, -0, -0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([1, 1, 1, 1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([1, 1, 1, 1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([1, 1, 1, 1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([1, 1, 1, 1]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([1, 1, 1, 1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([1, 1, 1, 1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-1, -1, -1, -1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-1, -1, -1, -1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-1, -1, -1, -1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-1, -1, -1, -1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [f32x4([-1, -1, -1, -1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 246913580),
      value("f32", 246913580),
      value("f32", 246913580),
      value("f32", 246913580),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 246913580),
      value("f32", 246913580),
      value("f32", 246913580),
      value("f32", 246913580),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 246913580),
      value("f32", 246913580),
      value("f32", 246913580),
      value("f32", 246913580),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
      value("f32", 2469135800000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
      value("f32", 0.000000000024691358),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 312749980000),
      value("f32", 312749980000),
      value("f32", 312749980000),
      value("f32", 312749980000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 312749980000),
      value("f32", 312749980000),
      value("f32", 312749980000),
      value("f32", 312749980000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
      value("f32", 163971060000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
      value("f32", 85968060000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.add`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 312749980000),
      value("f32", 312749980000),
      value("f32", 312749980000),
      value("f32", 312749980000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0, 0, 0, 0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0, 0, 0, 0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0, 0, 0, 0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0, 0, 0, 0]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0, 0, 0, 0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0, 0, 0, 0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-0, -0, -0, -0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-0, -0, -0, -0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-0, -0, -0, -0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-0, -0, -0, -0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-0, -0, -0, -0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
      value("f32", 0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
      value("f32", 0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
      value("f32", -0.000000000000000000000000000000000000011754945),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
      value("f32", -0.000000000000000000000000000000000000011754942),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([1, 1, 1, 1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([1, 1, 1, 1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([1, 1, 1, 1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([1, 1, 1, 1]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
      value("f32", 1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([1, 1, 1, 1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([1, 1, 1, 1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-1, -1, -1, -1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-1, -1, -1, -1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-1, -1, -1, -1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
      value("f32", -1.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-1, -1, -1, -1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [f32x4([-1, -1, -1, -1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
      value("f32", 5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
      value("f32", 6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
      value("f32", 5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
      value("f32", 7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
      value("f32", -6.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
      value("f32", -5.7831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
      value("f32", -7.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
      value("f32", -5.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sub`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0, 0, 0, 0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0, 0, 0, 0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0, 0, 0, 0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0, 0, 0, 0]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0, 0, 0, 0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0, 0, 0, 0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-0, -0, -0, -0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-0, -0, -0, -0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-0, -0, -0, -0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-0, -0, -0, -0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-0, -0, -0, -0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.25),
      value("f32", 0.25),
      value("f32", 0.25),
      value("f32", 0.25),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.25),
      value("f32", -0.25),
      value("f32", -0.25),
      value("f32", -0.25),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
      value("f32", -0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
      value("f32", 0.000000000000000000000000000000000000005877472),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.25),
      value("f32", -0.25),
      value("f32", -0.25),
      value("f32", -0.25),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.25),
      value("f32", 0.25),
      value("f32", 0.25),
      value("f32", 0.25),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([1, 1, 1, 1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([1, 1, 1, 1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([1, 1, 1, 1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([1, 1, 1, 1]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([1, 1, 1, 1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([1, 1, 1, 1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-1, -1, -1, -1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-1, -1, -1, -1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-1, -1, -1, -1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-1, -1, -1, -1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [f32x4([-1, -1, -1, -1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 39.47842),
      value("f32", 39.47842),
      value("f32", 39.47842),
      value("f32", 39.47842),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -39.47842),
      value("f32", -39.47842),
      value("f32", -39.47842),
      value("f32", -39.47842),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
      value("f32", -0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
      value("f32", 0.000000000000000000000000000000000000000000008),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
      value("f32", -0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
      value("f32", 0.00000000000000000000000000000000000007385849),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
      value("f32", -3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
      value("f32", 3.1415927),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -39.47842),
      value("f32", -39.47842),
      value("f32", -39.47842),
      value("f32", -39.47842),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 39.47842),
      value("f32", 39.47842),
      value("f32", 39.47842),
      value("f32", 39.47842),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
      value("f32", -0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
      value("f32", 0.00000047683713),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
      value("f32", -3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
      value("f32", 3.9999998),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
      value("f32", -170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
      value("f32", 170141170000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
      value("f32", 15241579000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
      value("f32", 0.00000000000000000000015241579),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
      value("f32", 6721627600000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.mul`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
      value("f32", 24453139000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0, 0, 0, 0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0, 0, 0, 0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0, 0, 0, 0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0, 0, 0, 0]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0, 0, 0, 0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0, 0, 0, 0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-0, -0, -0, -0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-0, -0, -0, -0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-0, -0, -0, -0]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-0, -0, -0, -0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-0, -0, -0, -0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000011920929),
      value("f32", 0.00000011920929),
      value("f32", 0.00000011920929),
      value("f32", 0.00000011920929),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000011920929),
      value("f32", -0.00000011920929),
      value("f32", -0.00000011920929),
      value("f32", -0.00000011920929),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.00000011920929),
      value("f32", -0.00000011920929),
      value("f32", -0.00000011920929),
      value("f32", -0.00000011920929),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000011920929),
      value("f32", 0.00000011920929),
      value("f32", 0.00000011920929),
      value("f32", 0.00000011920929),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
      value("f32", -0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
      value("f32", 0.000000000000000000000000000000000000000000003),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 8388608),
      value("f32", 8388608),
      value("f32", 8388608),
      value("f32", 8388608),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -8388608),
      value("f32", -8388608),
      value("f32", -8388608),
      value("f32", -8388608),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000001870857),
      value("f32", 0.000000000000000000000000000000000000001870857),
      value("f32", 0.000000000000000000000000000000000000001870857),
      value("f32", 0.000000000000000000000000000000000000001870857),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000001870857),
      value("f32", -0.000000000000000000000000000000000000001870857),
      value("f32", -0.000000000000000000000000000000000000001870857),
      value("f32", -0.000000000000000000000000000000000000001870857),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -8388608),
      value("f32", -8388608),
      value("f32", -8388608),
      value("f32", -8388608),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 8388608),
      value("f32", 8388608),
      value("f32", 8388608),
      value("f32", 8388608),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
      value("f32", -0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
      value("f32", 0.000000000000000000000000000000000000023509887),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000001870857),
      value("f32", -0.000000000000000000000000000000000000001870857),
      value("f32", -0.000000000000000000000000000000000000001870857),
      value("f32", -0.000000000000000000000000000000000000001870857),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000001870857),
      value("f32", 0.000000000000000000000000000000000000001870857),
      value("f32", 0.000000000000000000000000000000000000001870857),
      value("f32", 0.000000000000000000000000000000000000001870857),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42535296000000000000000000000000000000),
      value("f32", 42535296000000000000000000000000000000),
      value("f32", 42535296000000000000000000000000000000),
      value("f32", 42535296000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42535296000000000000000000000000000000),
      value("f32", -42535296000000000000000000000000000000),
      value("f32", -42535296000000000000000000000000000000),
      value("f32", -42535296000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([0.5, 0.5, 0.5, 0.5]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.07957747),
      value("f32", 0.07957747),
      value("f32", 0.07957747),
      value("f32", 0.07957747),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.07957747),
      value("f32", -0.07957747),
      value("f32", -0.07957747),
      value("f32", -0.07957747),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000001469368),
      value("f32", 0.000000000000000000000000000000000000001469368),
      value("f32", 0.000000000000000000000000000000000000001469368),
      value("f32", 0.000000000000000000000000000000000000001469368),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000001469368),
      value("f32", -0.000000000000000000000000000000000000001469368),
      value("f32", -0.000000000000000000000000000000000000001469368),
      value("f32", -0.000000000000000000000000000000000000001469368),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42535296000000000000000000000000000000),
      value("f32", -42535296000000000000000000000000000000),
      value("f32", -42535296000000000000000000000000000000),
      value("f32", -42535296000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42535296000000000000000000000000000000),
      value("f32", 42535296000000000000000000000000000000),
      value("f32", 42535296000000000000000000000000000000),
      value("f32", 42535296000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-0.5, -0.5, -0.5, -0.5]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.07957747),
      value("f32", -0.07957747),
      value("f32", -0.07957747),
      value("f32", -0.07957747),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.07957747),
      value("f32", 0.07957747),
      value("f32", 0.07957747),
      value("f32", 0.07957747),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000001469368),
      value("f32", -0.000000000000000000000000000000000000001469368),
      value("f32", -0.000000000000000000000000000000000000001469368),
      value("f32", -0.000000000000000000000000000000000000001469368),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000001469368),
      value("f32", 0.000000000000000000000000000000000000001469368),
      value("f32", 0.000000000000000000000000000000000000001469368),
      value("f32", 0.000000000000000000000000000000000000001469368),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([1, 1, 1, 1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([1, 1, 1, 1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85070590000000000000000000000000000000),
      value("f32", 85070590000000000000000000000000000000),
      value("f32", 85070590000000000000000000000000000000),
      value("f32", 85070590000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -85070590000000000000000000000000000000),
      value("f32", -85070590000000000000000000000000000000),
      value("f32", -85070590000000000000000000000000000000),
      value("f32", -85070590000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([1, 1, 1, 1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([1, 1, 1, 1]), f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([1, 1, 1, 1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([1, 1, 1, 1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.15915494),
      value("f32", 0.15915494),
      value("f32", 0.15915494),
      value("f32", 0.15915494),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.15915494),
      value("f32", -0.15915494),
      value("f32", -0.15915494),
      value("f32", -0.15915494),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000002938736),
      value("f32", 0.000000000000000000000000000000000000002938736),
      value("f32", 0.000000000000000000000000000000000000002938736),
      value("f32", 0.000000000000000000000000000000000000002938736),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000002938736),
      value("f32", -0.000000000000000000000000000000000000002938736),
      value("f32", -0.000000000000000000000000000000000000002938736),
      value("f32", -0.000000000000000000000000000000000000002938736),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-1, -1, -1, -1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-1, -1, -1, -1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -85070590000000000000000000000000000000),
      value("f32", -85070590000000000000000000000000000000),
      value("f32", -85070590000000000000000000000000000000),
      value("f32", -85070590000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 85070590000000000000000000000000000000),
      value("f32", 85070590000000000000000000000000000000),
      value("f32", 85070590000000000000000000000000000000),
      value("f32", 85070590000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-1, -1, -1, -1]), f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
      value("f32", -2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
      value("f32", 2),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-1, -1, -1, -1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [f32x4([-1, -1, -1, -1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.15915494),
      value("f32", -0.15915494),
      value("f32", -0.15915494),
      value("f32", -0.15915494),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.15915494),
      value("f32", 0.15915494),
      value("f32", 0.15915494),
      value("f32", 0.15915494),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000002938736),
      value("f32", -0.000000000000000000000000000000000000002938736),
      value("f32", -0.000000000000000000000000000000000000002938736),
      value("f32", -0.000000000000000000000000000000000000002938736),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000002938736),
      value("f32", 0.000000000000000000000000000000000000002938736),
      value("f32", 0.000000000000000000000000000000000000002938736),
      value("f32", 0.000000000000000000000000000000000000002938736),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000018464624),
      value("f32", 0.000000000000000000000000000000000000018464624),
      value("f32", 0.000000000000000000000000000000000000018464624),
      value("f32", 0.000000000000000000000000000000000000018464624),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000018464624),
      value("f32", -0.000000000000000000000000000000000000018464624),
      value("f32", -0.000000000000000000000000000000000000018464624),
      value("f32", -0.000000000000000000000000000000000000018464624),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
      value("f32", -12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
      value("f32", 12.566371),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000018464624),
      value("f32", -0.000000000000000000000000000000000000018464624),
      value("f32", -0.000000000000000000000000000000000000018464624),
      value("f32", -0.000000000000000000000000000000000000018464624),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000018464624),
      value("f32", 0.000000000000000000000000000000000000018464624),
      value("f32", 0.000000000000000000000000000000000000018464624),
      value("f32", 0.000000000000000000000000000000000000018464624),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 54157613000000000000000000000000000000),
      value("f32", 54157613000000000000000000000000000000),
      value("f32", 54157613000000000000000000000000000000),
      value("f32", 54157613000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -54157613000000000000000000000000000000),
      value("f32", -54157613000000000000000000000000000000),
      value("f32", -54157613000000000000000000000000000000),
      value("f32", -54157613000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -54157613000000000000000000000000000000),
      value("f32", -54157613000000000000000000000000000000),
      value("f32", -54157613000000000000000000000000000000),
      value("f32", -54157613000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 54157613000000000000000000000000000000),
      value("f32", 54157613000000000000000000000000000000),
      value("f32", 54157613000000000000000000000000000000),
      value("f32", 54157613000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0, 0, 0, 0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0, 0, 0, 0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0, -0, -0, -0]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([0.5, 0.5, 0.5, 0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([0.5, 0.5, 0.5, 0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-0.5, -0.5, -0.5, -0.5]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-0.5, -0.5, -0.5, -0.5]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([1, 1, 1, 1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([1, 1, 1, 1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-1, -1, -1, -1]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([Infinity, Infinity, Infinity, Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.div`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000000003743392),
      value("f32", 0.00000000000000000000003743392),
      value("f32", 0.00000000000000000000003743392),
      value("f32", 0.00000000000000000000003743392),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.00000000000000000010842022),
      value("f32", 0.00000000000000000010842022),
      value("f32", 0.00000000000000000010842022),
      value("f32", 0.00000000000000000010842022),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.70710677),
      value("f32", 0.70710677),
      value("f32", 0.70710677),
      value("f32", 0.70710677),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855])]),
  [
    new F32x4Pattern(
      value("f32", 2.5066283),
      value("f32", 2.5066283),
      value("f32", 2.5066283),
      value("f32", 2.5066283),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 18446743000000000000),
      value("f32", 18446743000000000000),
      value("f32", 18446743000000000000),
      value("f32", 18446743000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([Infinity, Infinity, Infinity, Infinity])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([-Infinity, -Infinity, -Infinity, -Infinity])]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 11111.111),
      value("f32", 11111.111),
      value("f32", 11111.111),
      value("f32", 11111.111),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 11111.111),
      value("f32", 11111.111),
      value("f32", 11111.111),
      value("f32", 11111.111),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 11111.111),
      value("f32", 11111.111),
      value("f32", 11111.111),
      value("f32", 11111.111),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
      value("f32", 35136419000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
      value("f32", 0.0000035136418),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 286331170),
      value("f32", 286331170),
      value("f32", 286331170),
      value("f32", 286331170),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 395442.78),
      value("f32", 395442.78),
      value("f32", 395442.78),
      value("f32", 395442.78),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 286331170),
      value("f32", 286331170),
      value("f32", 286331170),
      value("f32", 286331170),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 395442.78),
      value("f32", 395442.78),
      value("f32", 395442.78),
      value("f32", 395442.78),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 286331170),
      value("f32", 286331170),
      value("f32", 286331170),
      value("f32", 286331170),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
      value("f32", 207325900000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.sqrt`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 395442.78),
      value("f32", 395442.78),
      value("f32", 395442.78),
      value("f32", 395442.78),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855])]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([Infinity, Infinity, Infinity, Infinity])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([-Infinity, -Infinity, -Infinity, -Infinity])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", -123456790),
      value("f32", -123456790),
      value("f32", -123456790),
      value("f32", -123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", -123456790),
      value("f32", -123456790),
      value("f32", -123456790),
      value("f32", -123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", -123456790),
      value("f32", -123456790),
      value("f32", -123456790),
      value("f32", -123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
      value("f32", -1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
      value("f32", -0.000000000012345679),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -156374990000),
      value("f32", -156374990000),
      value("f32", -156374990000),
      value("f32", -156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -156374990000),
      value("f32", -156374990000),
      value("f32", -156374990000),
      value("f32", -156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
      value("f32", -81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
      value("f32", -42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.neg`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -156374990000),
      value("f32", -156374990000),
      value("f32", -156374990000),
      value("f32", -156374990000),
    ),
  ],
);


let $1 = instantiate(`(module

  (func (export "f32x4_sqrt_arith") (result v128)
    (f32x4.sqrt (v128.const f32x4 nan:0x200000 -nan:0x200000 16.0 25.0)))
  (func (export "f32x4_sqrt_canon") (result v128)
    (f32x4.sqrt (v128.const f32x4 -1.0 nan 4.0 9.0)))
  (func (export "f32x4_sqrt_mixed") (result v128)
    (f32x4.sqrt (v128.const f32x4 -inf nan:0x200000 36.0 49.0)))
)`);


assert_return(
  () => invoke($1, `f32x4_sqrt_arith`, []),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      value("f32", 4),
      value("f32", 5),
    ),
  ],
);


assert_return(
  () => invoke($1, `f32x4_sqrt_canon`, []),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      value("f32", 2),
      value("f32", 3),
    ),
  ],
);


assert_return(
  () => invoke($1, `f32x4_sqrt_mixed`, []),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `arithmetic_nan`,
      value("f32", 6),
      value("f32", 7),
    ),
  ],
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.neg (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.sqrt (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.add (i32.const 0) (f32.const 0.0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.sub (i32.const 0) (f32.const 0.0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.mul (i32.const 0) (f32.const 0.0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.div (i32.const 0) (f32.const 0.0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.neg-arg-empty (result v128)
      (f32x4.neg)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.sqrt-arg-empty (result v128)
      (f32x4.sqrt)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.add-1st-arg-empty (result v128)
      (f32x4.add (v128.const f32x4 0 0 0 0))
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.add-arg-empty (result v128)
      (f32x4.add)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.sub-1st-arg-empty (result v128)
      (f32x4.sub (v128.const f32x4 0 0 0 0))
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.sub-arg-empty (result v128)
      (f32x4.sub)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.mul-1st-arg-empty (result v128)
      (f32x4.mul (v128.const f32x4 0 0 0 0))
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.mul-arg-empty (result v128)
      (f32x4.mul)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.div-1st-arg-empty (result v128)
      (f32x4.div (v128.const f32x4 0 0 0 0))
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.div-arg-empty (result v128)
      (f32x4.div)
    )
  )`),
  `type mismatch`,
);


let $2 = instantiate(`(module
  (func (export "add-sub") (param v128 v128 v128) (result v128)
    (f32x4.add (f32x4.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "div-add") (param v128 v128 v128) (result v128)
    (f32x4.div (f32x4.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "div-mul") (param v128 v128 v128) (result v128)
    (f32x4.div (f32x4.mul (local.get 0) (local.get 1))(local.get 2)))
  (func (export "div-sub") (param v128 v128 v128) (result v128)
    (f32x4.div (f32x4.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-add") (param v128 v128 v128) (result v128)
    (f32x4.mul (f32x4.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-div") (param v128 v128 v128) (result v128)
    (f32x4.mul (f32x4.div (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-sub") (param v128 v128 v128) (result v128)
    (f32x4.mul (f32x4.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "sub-add") (param v128 v128 v128) (result v128)
    (f32x4.sub (f32x4.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "add-neg") (param v128 v128) (result v128)
    (f32x4.add (f32x4.neg (local.get 0)) (local.get 1)))
  (func (export "add-sqrt") (param v128 v128) (result v128)
    (f32x4.add (f32x4.sqrt (local.get 0)) (local.get 1)))
  (func (export "div-neg") (param v128 v128) (result v128)
    (f32x4.div (f32x4.neg (local.get 0)) (local.get 1)))
  (func (export "div-sqrt") (param v128 v128) (result v128)
    (f32x4.div (f32x4.sqrt (local.get 0)) (local.get 1)))
  (func (export "mul-neg") (param v128 v128) (result v128)
    (f32x4.mul (f32x4.neg (local.get 0)) (local.get 1)))
  (func (export "mul-sqrt") (param v128 v128) (result v128)
    (f32x4.mul (f32x4.sqrt (local.get 0)) (local.get 1)))
  (func (export "sub-neg") (param v128 v128) (result v128)
    (f32x4.sub (f32x4.neg (local.get 0)) (local.get 1)))
  (func (export "sub-sqrt") (param v128 v128) (result v128)
    (f32x4.sub (f32x4.sqrt (local.get 0)) (local.get 1)))
)`);


assert_return(
  () => invoke($2, `add-sub`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($2, `div-add`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 5),
      value("f32", 5),
      value("f32", 5),
      value("f32", 5),
    ),
  ],
);


assert_return(
  () => invoke($2, `div-mul`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([4, 4, 4, 4]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 18),
      value("f32", 18),
      value("f32", 18),
      value("f32", 18),
    ),
  ],
);


assert_return(
  () => invoke($2, `div-sub`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 4),
      value("f32", 4),
      value("f32", 4),
      value("f32", 4),
    ),
  ],
);


assert_return(
  () => invoke($2, `mul-add`, [
    f32x4([1.25, 1.25, 1.25, 1.25]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.375),
      value("f32", 0.375),
      value("f32", 0.375),
      value("f32", 0.375),
    ),
  ],
);


assert_return(
  () => invoke($2, `mul-div`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 2.25),
      value("f32", 2.25),
      value("f32", 2.25),
      value("f32", 2.25),
    ),
  ],
);


assert_return(
  () => invoke($2, `mul-sub`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.25),
      value("f32", 0.25),
      value("f32", 0.25),
      value("f32", 0.25),
    ),
  ],
);


assert_return(
  () => invoke($2, `sub-add`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1.25),
      value("f32", 1.25),
      value("f32", 1.25),
      value("f32", 1.25),
    ),
  ],
);


assert_return(
  () => invoke($2, `add-neg`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($2, `add-sqrt`, [
    f32x4([2.25, 2.25, 2.25, 2.25]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1.75),
      value("f32", 1.75),
      value("f32", 1.75),
      value("f32", 1.75),
    ),
  ],
);


assert_return(
  () => invoke($2, `div-neg`, [
    f32x4([1.5, 1.5, 1.5, 1.5]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
    ),
  ],
);


assert_return(
  () => invoke($2, `div-sqrt`, [
    f32x4([2.25, 2.25, 2.25, 2.25]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
    ),
  ],
);


assert_return(
  () => invoke($2, `mul-neg`, [
    f32x4([1.5, 1.5, 1.5, 1.5]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0.375),
      value("f32", -0.375),
      value("f32", -0.375),
      value("f32", -0.375),
    ),
  ],
);


assert_return(
  () => invoke($2, `mul-sqrt`, [
    f32x4([2.25, 2.25, 2.25, 2.25]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0.375),
      value("f32", 0.375),
      value("f32", 0.375),
      value("f32", 0.375),
    ),
  ],
);


assert_return(
  () => invoke($2, `sub-neg`, [
    f32x4([1.125, 1.125, 1.125, 1.125]),
    f32x4([0.125, 0.125, 0.125, 0.125]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1.25),
      value("f32", -1.25),
      value("f32", -1.25),
      value("f32", -1.25),
    ),
  ],
);


assert_return(
  () => invoke($2, `sub-sqrt`, [
    f32x4([2.25, 2.25, 2.25, 2.25]),
    f32x4([0.25, 0.25, 0.25, 0.25]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1.25),
      value("f32", 1.25),
      value("f32", 1.25),
      value("f32", 1.25),
    ),
  ],
);
