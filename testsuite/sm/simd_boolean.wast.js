






let $0 = instantiate(`(module
  (func (export "i8x16.any_true") (param $$0 v128) (result i32) (v128.any_true (local.get $$0)))
  (func (export "i8x16.all_true") (param $$0 v128) (result i32) (i8x16.all_true (local.get $$0)))
  (func (export "i8x16.bitmask") (param $$0 v128) (result i32) (i8x16.bitmask (local.get $$0)))

  (func (export "i16x8.any_true") (param $$0 v128) (result i32) (v128.any_true (local.get $$0)))
  (func (export "i16x8.all_true") (param $$0 v128) (result i32) (i16x8.all_true (local.get $$0)))
  (func (export "i16x8.bitmask") (param $$0 v128) (result i32) (i16x8.bitmask (local.get $$0)))

  (func (export "i32x4.any_true") (param $$0 v128) (result i32) (v128.any_true (local.get $$0)))
  (func (export "i32x4.all_true") (param $$0 v128) (result i32) (i32x4.all_true (local.get $$0)))
  (func (export "i32x4.bitmask") (param $$0 v128) (result i32) (i32x4.bitmask (local.get $$0)))

  (func (export "i64x2.all_true") (param $$0 v128) (result i32) (i64x2.all_true (local.get $$0)))
  (func (export "i64x2.bitmask") (param $$0 v128) (result i32) (i64x2.bitmask (local.get $$0)))
)`);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xf]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.any_true`, [
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xf]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.all_true`, [
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i8x16.bitmask`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 65535)],
);


assert_return(
  () => invoke($0, `i8x16.bitmask`, [
    i8x16([0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xf]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [
    i16x8([0xffff, 0x0, 0x1, 0x2, 0xb, 0xc, 0xd, 0xf]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [
    i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [
    i16x8([0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [
    i16x8([0x3039, 0x3039, 0x3039, 0x3039, 0x3039, 0x3039, 0x3039, 0x3039]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.any_true`, [
    i16x8([0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [
    i16x8([0xffff, 0x0, 0x1, 0x2, 0xb, 0xc, 0xd, 0xf]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [
    i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [
    i16x8([0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [
    i16x8([0x3039, 0x3039, 0x3039, 0x3039, 0x3039, 0x3039, 0x3039, 0x3039]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.all_true`, [
    i16x8([0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i16x8.bitmask`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 255)],
);


assert_return(
  () => invoke($0, `i16x8.bitmask`, [
    i16x8([0xffff, 0x0, 0x1, 0x2, 0xb, 0xc, 0xd, 0xf]),
  ]),
  [value("i32", 1)],
);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0x0, 0x0, 0x0, 0x0])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0x0, 0x0, 0x1, 0x0])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0x1, 0x1, 0x0, 0x1])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0x1, 0x1, 0x1, 0x1])]), [value("i32", 1)]);


assert_return(
  () => invoke($0, `i32x4.any_true`, [i32x4([0xffffffff, 0x0, 0x1, 0xf])]),
  [value("i32", 1)],
);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0x0, 0x0, 0x0, 0x0])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0xff, 0xff, 0xff, 0xff])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0xab, 0xab, 0xab, 0xab])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i32x4.any_true`, [i32x4([0x55, 0x55, 0x55, 0x55])]), [value("i32", 1)]);


assert_return(
  () => invoke($0, `i32x4.any_true`, [
    i32x4([0x499602d2, 0x499602d2, 0x499602d2, 0x499602d2]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i32x4.any_true`, [
    i32x4([0x12345678, 0x12345678, 0x12345678, 0x12345678]),
  ]),
  [value("i32", 1)],
);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0x0, 0x0, 0x0, 0x0])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0x0, 0x0, 0x1, 0x0])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0x1, 0x1, 0x0, 0x1])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0x1, 0x1, 0x1, 0x1])]), [value("i32", 1)]);


assert_return(
  () => invoke($0, `i32x4.all_true`, [i32x4([0xffffffff, 0x0, 0x1, 0xf])]),
  [value("i32", 0)],
);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0x0, 0x0, 0x0, 0x0])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0xff, 0xff, 0xff, 0xff])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0xab, 0xab, 0xab, 0xab])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i32x4.all_true`, [i32x4([0x55, 0x55, 0x55, 0x55])]), [value("i32", 1)]);


assert_return(
  () => invoke($0, `i32x4.all_true`, [
    i32x4([0x499602d2, 0x499602d2, 0x499602d2, 0x499602d2]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i32x4.all_true`, [
    i32x4([0x12345678, 0x12345678, 0x12345678, 0x12345678]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($0, `i32x4.bitmask`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 15)],
);


assert_return(
  () => invoke($0, `i32x4.bitmask`, [i32x4([0xffffffff, 0x0, 0x1, 0xf])]),
  [value("i32", 1)],
);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0x0n, 0x0n])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0x0n, 0x1n])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0x1n, 0x0n])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0x1n, 0x1n])]), [value("i32", 1)]);


assert_return(
  () => invoke($0, `i64x2.all_true`, [i64x2([0xffffffffffffffffn, 0x0n])]),
  [value("i32", 0)],
);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0x0n, 0x0n])]), [value("i32", 0)]);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0xffn, 0xffn])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0xabn, 0xabn])]), [value("i32", 1)]);


assert_return(() => invoke($0, `i64x2.all_true`, [i64x2([0x55n, 0x55n])]), [value("i32", 1)]);


assert_return(
  () => invoke($0, `i64x2.bitmask`, [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])]),
  [value("i32", 3)],
);


assert_return(
  () => invoke($0, `i64x2.bitmask`, [i64x2([0xffffffffffffffffn, 0xfn])]),
  [value("i32", 1)],
);


let $1 = instantiate(`(module (memory 1)
    ;; as if condition
    (func (export "i8x16_any_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (v128.any_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i16x8_any_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (v128.any_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i32x4_any_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (v128.any_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i8x16_all_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i8x16.all_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i16x8_all_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i16x8.all_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    (func (export "i32x4_all_true_as_if_cond") (param v128) (result i32)
        (if (result i32) (i32x4.all_true (local.get 0))
            (then (i32.const 1))
            (else (i32.const 0))
        )
    )
    ;; any_true as select condition
    (func (export "i8x16_any_true_as_select_cond") (param v128) (result i32)
     (select (i32.const 1) (i32.const 0) (v128.any_true (local.get 0)))
    )
    (func (export "i16x8_any_true_as_select_cond") (param v128) (result i32)
     (select (i32.const 1) (i32.const 0) (v128.any_true (local.get 0)))
    )
    (func (export "i32x4_any_true_as_select_cond") (param v128) (result i32)
     (select (i32.const 1) (i32.const 0) (v128.any_true (local.get 0)))
    )
    ;; all_true as select condition
    (func (export "i8x16_all_true_as_select_cond") (param v128) (result i32)
     (select (i32.const 1) (i32.const 0) (i8x16.all_true (local.get 0)))
    )
    (func (export "i16x8_all_true_as_select_cond") (param v128) (result i32)
     (select (i32.const 1) (i32.const 0) (i16x8.all_true (local.get 0)))
    )
    (func (export "i32x4_all_true_as_select_cond") (param v128) (result i32)
     (select (i32.const 1) (i32.const 0) (i32x4.all_true (local.get 0)))
    )
    ;; any_true as br_if condition
    (func (export "i8x16_any_true_as_br_if_cond") (param $$0 v128) (result i32)
      (local $$1 i32)
      (local.set $$1 (i32.const 2))
      (block
        (local.set $$1 (i32.const 1))
        (br_if 0 (v128.any_true (local.get $$0)))
        (local.set $$1 (i32.const 0))
      )
      (local.get $$1)
    )
    (func (export "i16x8_any_true_as_br_if_cond") (param $$0 v128) (result i32)
      (local $$1 i32)
      (local.set $$1 (i32.const 2))
      (block
        (local.set $$1 (i32.const 1))
        (br_if 0 (v128.any_true (local.get $$0)))
        (local.set $$1 (i32.const 0))
      )
      (local.get $$1)
    )
    (func (export "i32x4_any_true_as_br_if_cond") (param $$0 v128) (result i32)
      (local $$1 i32)
      (local.set $$1 (i32.const 2))
      (block
        (local.set $$1 (i32.const 1))
        (br_if 0 (v128.any_true (local.get $$0)))
        (local.set $$1 (i32.const 0))
      )
      (local.get $$1)
    )
    ;; all_true as br_if condition
    (func (export "i8x16_all_true_as_br_if_cond") (param $$0 v128) (result i32)
      (local $$1 i32)
      (local.set $$1 (i32.const 2))
      (block
        (local.set $$1 (i32.const 1))
        (br_if 0 (i8x16.all_true (local.get $$0)))
        (local.set $$1 (i32.const 0))
      )
      (local.get $$1)
    )
    (func (export "i16x8_all_true_as_br_if_cond") (param $$0 v128) (result i32)
      (local $$1 i32)
      (local.set $$1 (i32.const 2))
      (block
        (local.set $$1 (i32.const 1))
        (br_if 0 (i16x8.all_true (local.get $$0)))
        (local.set $$1 (i32.const 0))
      )
      (local.get $$1)
    )
    (func (export "i32x4_all_true_as_br_if_cond") (param $$0 v128) (result i32)
      (local $$1 i32)
      (local.set $$1 (i32.const 2))
      (block
        (local.set $$1 (i32.const 1))
        (br_if 0 (i32x4.all_true (local.get $$0)))
        (local.set $$1 (i32.const 0))
      )
      (local.get $$1)
    )
    ;; any_true as i32.and operand
    (func (export "i8x16_any_true_as_i32.and_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.and (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
    (func (export "i16x8_any_true_as_i32.and_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.and (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
    (func (export "i32x4_any_true_as_i32.and_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.and (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
     ;; any_true as i32.or operand
    (func (export "i8x16_any_true_as_i32.or_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.or (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
    (func (export "i16x8_any_true_as_i32.or_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.or (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
    (func (export "i32x4_any_true_as_i32.or_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.or (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
     ;; any_true as i32.xor operand
    (func (export "i8x16_any_true_as_i32.xor_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.xor (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
    (func (export "i16x8_any_true_as_i32.xor_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.xor (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
    (func (export "i32x4_any_true_as_i32.xor_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.xor (v128.any_true (local.get $$0)) (v128.any_true (local.get $$1)))
    )
     ;; all_true as i32.and operand
    (func (export "i8x16_all_true_as_i32.and_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.and (i8x16.all_true (local.get $$0)) (i8x16.all_true (local.get $$1)))
    )
    (func (export "i16x8_all_true_as_i32.and_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.and (i16x8.all_true (local.get $$0)) (i16x8.all_true (local.get $$1)))
    )
    (func (export "i32x4_all_true_as_i32.and_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.and (i32x4.all_true (local.get $$0)) (i32x4.all_true (local.get $$1)))
    )
     ;; all_true as i32.or operand
    (func (export "i8x16_all_true_as_i32.or_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.or (i8x16.all_true (local.get $$0)) (i8x16.all_true (local.get $$1)))
    )
    (func (export "i16x8_all_true_as_i32.or_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.or (i16x8.all_true (local.get $$0)) (i16x8.all_true (local.get $$1)))
    )
    (func (export "i32x4_all_true_as_i32.or_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.or (i32x4.all_true (local.get $$0)) (i32x4.all_true (local.get $$1)))
    )
     ;; all_true as i32.xor operand
    (func (export "i8x16_all_true_as_i32.xor_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.xor (i8x16.all_true (local.get $$0)) (i8x16.all_true (local.get $$1)))
    )
    (func (export "i16x8_all_true_as_i32.xor_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.xor (i16x8.all_true (local.get $$0)) (i16x8.all_true (local.get $$1)))
    )
    (func (export "i32x4_all_true_as_i32.xor_operand") (param $$0 v128) (param $$1 v128) (result i32)
      (i32.xor (i32x4.all_true (local.get $$0)) (i32x4.all_true (local.get $$1)))
    )
    ;; any_true with v128.not
    (func (export "i8x16_any_true_with_v128.not") (param $$0 v128) (result i32)
       (v128.any_true (v128.not (local.get $$0)))
    )
    (func (export "i16x8_any_true_with_v128.not") (param $$0 v128) (result i32)
       (v128.any_true (v128.not (local.get $$0)))
    )
    (func (export "i32x4_any_true_with_v128.not") (param $$0 v128) (result i32)
       (v128.any_true (v128.not (local.get $$0)))
    )
    ;; any_true with v128.and
    (func (export "i8x16_any_true_with_v128.and") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.and (local.get $$0) (local.get $$1)))
    )
    (func (export "i16x8_any_true_with_v128.and") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.and (local.get $$0) (local.get $$1)))
    )
    (func (export "i32x4_any_true_with_v128.and") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.and (local.get $$0) (local.get $$1)))
    )
    ;; any_true with v128.or
    (func (export "i8x16_any_true_with_v128.or") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.or (local.get $$0) (local.get $$1)))
    )
    (func (export "i16x8_any_true_with_v128.or") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.or (local.get $$0) (local.get $$1)))
    )
    (func (export "i32x4_any_true_with_v128.or") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.or (local.get $$0) (local.get $$1)))
    )
    ;; any_true with v128.xor
    (func (export "i8x16_any_true_with_v128.xor") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.xor (local.get $$0) (local.get $$1)))
    )
    (func (export "i16x8_any_true_with_v128.xor") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.xor (local.get $$0) (local.get $$1)))
    )
    (func (export "i32x4_any_true_with_v128.xor") (param $$0 v128) (param $$1 v128) (result i32)
       (v128.any_true (v128.xor (local.get $$0) (local.get $$1)))
    )
    ;; any_true with v128.bitselect
    (func (export "i8x16_any_true_with_v128.bitselect") (param $$0 v128) (param $$1 v128) (param $$2 v128) (result i32)
       (v128.any_true (v128.bitselect (local.get $$0) (local.get $$1) (local.get $$2)))
    )
    (func (export "i16x8_any_true_with_v128.bitselect") (param $$0 v128) (param $$1 v128) (param $$2 v128) (result i32)
       (v128.any_true (v128.bitselect (local.get $$0) (local.get $$1) (local.get $$2)))
    )
    (func (export "i32x4_any_true_with_v128.bitselect") (param $$0 v128) (param $$1 v128) (param $$2 v128) (result i32)
       (v128.any_true (v128.bitselect (local.get $$0) (local.get $$1) (local.get $$2)))
    )
    ;; all_true with v128.not
    (func (export "i8x16_all_true_with_v128.not") (param $$0 v128) (result i32)
       (i8x16.all_true (v128.not (local.get $$0)))
    )
    (func (export "i16x8_all_true_with_v128.not") (param $$0 v128) (result i32)
       (i16x8.all_true (v128.not (local.get $$0)))
    )
    (func (export "i32x4_all_true_with_v128.not") (param $$0 v128) (result i32)
       (i32x4.all_true (v128.not (local.get $$0)))
    )
    ;; all_true with v128.and
    (func (export "i8x16_all_true_with_v128.and") (param $$0 v128) (param $$1 v128) (result i32)
       (i8x16.all_true (v128.and (local.get $$0) (local.get $$1)))
    )
    (func (export "i16x8_all_true_with_v128.and") (param $$0 v128) (param $$1 v128) (result i32)
       (i16x8.all_true (v128.and (local.get $$0) (local.get $$1)))
    )
    (func (export "i32x4_all_true_with_v128.and") (param $$0 v128) (param $$1 v128) (result i32)
       (i32x4.all_true (v128.and (local.get $$0) (local.get $$1)))
    )
    ;; all_true with v128.or
    (func (export "i8x16_all_true_with_v128.or") (param $$0 v128) (param $$1 v128) (result i32)
       (i8x16.all_true (v128.or (local.get $$0) (local.get $$1)))
    )
    (func (export "i16x8_all_true_with_v128.or") (param $$0 v128) (param $$1 v128) (result i32)
       (i16x8.all_true (v128.or (local.get $$0) (local.get $$1)))
    )
    (func (export "i32x4_all_true_with_v128.or") (param $$0 v128) (param $$1 v128) (result i32)
       (i32x4.all_true (v128.or (local.get $$0) (local.get $$1)))
    )
    ;; all_true with v128.xor
    (func (export "i8x16_all_true_with_v128.xor") (param $$0 v128) (param $$1 v128) (result i32)
       (i8x16.all_true (v128.xor (local.get $$0) (local.get $$1)))
    )
    (func (export "i16x8_all_true_with_v128.xor") (param $$0 v128) (param $$1 v128) (result i32)
       (i16x8.all_true (v128.xor (local.get $$0) (local.get $$1)))
    )
    (func (export "i32x4_all_true_with_v128.xor") (param $$0 v128) (param $$1 v128) (result i32)
       (i32x4.all_true (v128.xor (local.get $$0) (local.get $$1)))
    )
    ;; all_true with v128.bitselect
    (func (export "i8x16_all_true_with_v128.bitselect") (param $$0 v128) (param $$1 v128) (param $$2 v128) (result i32)
       (i8x16.all_true (v128.bitselect (local.get $$0) (local.get $$1) (local.get $$2)))
    )
    (func (export "i16x8_all_true_with_v128.bitselect") (param $$0 v128) (param $$1 v128) (param $$2 v128) (result i32)
       (i16x8.all_true (v128.bitselect (local.get $$0) (local.get $$1) (local.get $$2)))
    )
    (func (export "i32x4_all_true_with_v128.bitselect") (param $$0 v128) (param $$1 v128) (param $$2 v128) (result i32)
       (i32x4.all_true (v128.bitselect (local.get $$0) (local.get $$1) (local.get $$2)))
    )
)`);


assert_return(
  () => invoke($1, `i8x16_any_true_as_if_cond`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_if_cond`, [
    i8x16([0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_if_cond`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_if_cond`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_if_cond`, [
    i16x8([0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_if_cond`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_if_cond`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_if_cond`, [i32x4([0x0, 0x0, 0x1, 0x0])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_if_cond`, [i32x4([0x1, 0x1, 0x1, 0x1])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_if_cond`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_if_cond`, [
    i8x16([0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_if_cond`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_if_cond`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_if_cond`, [
    i16x8([0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_if_cond`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_if_cond`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_if_cond`, [i32x4([0x1, 0x1, 0x1, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_if_cond`, [i32x4([0x1, 0x1, 0x1, 0x1])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_select_cond`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_select_cond`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_select_cond`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_select_cond`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_select_cond`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_select_cond`, [i32x4([0x0, 0x0, 0x1, 0x0])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_select_cond`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_select_cond`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_select_cond`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_select_cond`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_select_cond`, [i32x4([0x1, 0x1, 0x1, 0x1])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_select_cond`, [i32x4([0x1, 0x1, 0x0, 0x1])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_br_if_cond`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_br_if_cond`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_br_if_cond`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_br_if_cond`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_br_if_cond`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_br_if_cond`, [i32x4([0x0, 0x0, 0x1, 0x0])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_br_if_cond`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_br_if_cond`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_br_if_cond`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_br_if_cond`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_br_if_cond`, [i32x4([0x1, 0x1, 0x1, 0x1])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_br_if_cond`, [i32x4([0x1, 0x1, 0x0, 0x1])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.and_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.and_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.and_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.and_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.and_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.and_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.and_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.and_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.and_operand`, [
    i32x4([0x0, 0x0, 0x1, 0x0]),
    i32x4([0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.or_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.or_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.or_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.or_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.or_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.or_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.or_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.or_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.or_operand`, [
    i32x4([0x0, 0x0, 0x1, 0x0]),
    i32x4([0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.xor_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.xor_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_as_i32.xor_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.xor_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.xor_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_as_i32.xor_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.xor_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.xor_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_as_i32.xor_operand`, [
    i32x4([0x0, 0x0, 0x1, 0x0]),
    i32x4([0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.and_operand`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.and_operand`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.and_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.and_operand`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.and_operand`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.and_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.and_operand`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.and_operand`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.and_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x1, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.or_operand`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.or_operand`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.or_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.or_operand`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.or_operand`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.or_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.or_operand`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.or_operand`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.or_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.xor_operand`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.xor_operand`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_as_i32.xor_operand`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.xor_operand`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.xor_operand`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
    i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_as_i32.xor_operand`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.xor_operand`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.xor_operand`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x0, 0x1]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_as_i32.xor_operand`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.not`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.not`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.not`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.not`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.not`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.not`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.not`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.not`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.not`, [i32x4([0x0, 0x0, 0xffffffff, 0x0])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.and`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.and`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.and`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.and`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.and`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.and`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.and`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.and`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.and`, [
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.or`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.or`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.or`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.or`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.or`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.or`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.or`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.or`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.or`, [
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.xor`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.xor`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.xor`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.xor`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.xor`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.xor`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.xor`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.xor`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.xor`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.bitselect`, [
    i8x16([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_any_true_with_v128.bitselect`, [
    i8x16([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xff, 0x55]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.bitselect`, [
    i16x8([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_any_true_with_v128.bitselect`, [
    i16x8([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xff, 0x55]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.bitselect`, [
    i32x4([0xaa, 0xaa, 0xaa, 0xaa]),
    i32x4([0x55, 0x55, 0x55, 0x55]),
    i32x4([0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_any_true_with_v128.bitselect`, [
    i32x4([0xaa, 0xaa, 0xaa, 0xaa]),
    i32x4([0x55, 0x55, 0x55, 0x55]),
    i32x4([0x55, 0x55, 0xff, 0x55]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.not`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.not`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.not`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.not`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.not`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.not`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.not`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.not`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.not`, [i32x4([0x0, 0x0, 0xffffffff, 0x0])]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.and`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.and`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.and`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.and`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.and`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.and`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.and`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.and`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.and`, [
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.or`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.or`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.or`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.or`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.or`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.or`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.or`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.or`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.or`, [
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
    i32x4([0x0, 0x0, 0xffffffff, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.xor`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.xor`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.xor`, [
    i8x16([0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff]),
    i8x16([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.xor`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.xor`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.xor`, [
    i16x8([0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff]),
    i16x8([0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.xor`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.xor`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.xor`, [
    i32x4([0x0, 0xffffffff, 0x0, 0xffffffff]),
    i32x4([0xffffffff, 0x0, 0xffffffff, 0x0]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.bitselect`, [
    i8x16([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i8x16_all_true_with_v128.bitselect`, [
    i8x16([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i8x16([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i8x16([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.bitselect`, [
    i16x8([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i16x8_all_true_with_v128.bitselect`, [
    i16x8([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
    i16x8([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]),
    i16x8([0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]),
  ]),
  [value("i32", 1)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.bitselect`, [
    i32x4([0xaa, 0xaa, 0xaa, 0xaa]),
    i32x4([0x55, 0x55, 0x55, 0x55]),
    i32x4([0x55, 0x55, 0x55, 0x55]),
  ]),
  [value("i32", 0)],
);


assert_return(
  () => invoke($1, `i32x4_all_true_with_v128.bitselect`, [
    i32x4([0xaa, 0xaa, 0xaa, 0xaa]),
    i32x4([0x55, 0x55, 0x55, 0x55]),
    i32x4([0xaa, 0xaa, 0xaa, 0xaa]),
  ]),
  [value("i32", 1)],
);


assert_invalid(
  () => instantiate(`(module (func (result i32) (v128.any_true (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result i32) (i8x16.all_true (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result i32) (v128.any_true (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result i32) (i16x8.all_true (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result i32) (v128.any_true (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result i32) (i32x4.all_true (i32.const 0))))`),
  `type mismatch`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result i32) (f32x4.any_true (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result i32) (f32x4.all_true (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result i32) (f64x2.any_true (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result i32) (f64x2.all_true (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$v128.any_true-arg-empty (result v128)
      (v128.any_true)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i8x16.all_true-arg-empty (result v128)
      (i8x16.all_true)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$v128.any_true-arg-empty (result v128)
      (v128.any_true)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i16x8.all_true-arg-empty (result v128)
      (i16x8.all_true)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$v128.any_true-arg-empty (result v128)
      (v128.any_true)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.all_true-arg-empty (result v128)
      (i32x4.all_true)
    )
  )`),
  `type mismatch`,
);
