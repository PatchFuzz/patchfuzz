






let $0 = instantiate(`(module
  (func (export "f64x2.ceil") (param v128) (result v128) (f64x2.ceil (local.get 0)))
  (func (export "f64x2.floor") (param v128) (result v128) (f64x2.floor (local.get 0)))
  (func (export "f64x2.trunc") (param v128) (result v128) (f64x2.trunc (local.get 0)))
  (func (export "f64x2.nearest") (param v128) (result v128) (f64x2.nearest (local.get 0)))
)`);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([0, 0])]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([-0, -0])]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([0.5, 0.5])]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([-0.5, -0.5])]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([1, 1])]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([-1, -1])]),
  [new F64x2Pattern(value("f64", -1), value("f64", -1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([6.283185307179586, 6.283185307179586])]),
  [new F64x2Pattern(value("f64", 7), value("f64", 7))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([-6.283185307179586, -6.283185307179586])]),
  [new F64x2Pattern(value("f64", -6), value("f64", -6))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([Infinity, Infinity])]),
  [new F64x2Pattern(value("f64", Infinity), value("f64", Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([-Infinity, -Infinity])]),
  [new F64x2Pattern(value("f64", -Infinity), value("f64", -Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([123456789.01234567, 123456789.01234567])]),
  [new F64x2Pattern(value("f64", 123456790), value("f64", 123456790))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([0.000000000012345678901234568, 0.000000000012345678901234568]),
  ]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([0, 0])]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([-0, -0])]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", -1), value("f64", -1))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([0.5, 0.5])]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([-0.5, -0.5])]),
  [new F64x2Pattern(value("f64", -1), value("f64", -1))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([1, 1])]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([-1, -1])]),
  [new F64x2Pattern(value("f64", -1), value("f64", -1))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([6.283185307179586, 6.283185307179586])]),
  [new F64x2Pattern(value("f64", 6), value("f64", 6))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([-6.283185307179586, -6.283185307179586])]),
  [new F64x2Pattern(value("f64", -7), value("f64", -7))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([Infinity, Infinity])]),
  [new F64x2Pattern(value("f64", Infinity), value("f64", Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([-Infinity, -Infinity])]),
  [new F64x2Pattern(value("f64", -Infinity), value("f64", -Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([123456789.01234567, 123456789.01234567])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([0.000000000012345678901234568, 0.000000000012345678901234568]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([0, 0])]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([-0, -0])]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([0.5, 0.5])]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([-0.5, -0.5])]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([1, 1])]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([-1, -1])]),
  [new F64x2Pattern(value("f64", -1), value("f64", -1))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([6.283185307179586, 6.283185307179586])]),
  [new F64x2Pattern(value("f64", 6), value("f64", 6))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([-6.283185307179586, -6.283185307179586])]),
  [new F64x2Pattern(value("f64", -6), value("f64", -6))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([Infinity, Infinity])]),
  [new F64x2Pattern(value("f64", Infinity), value("f64", Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([-Infinity, -Infinity])]),
  [new F64x2Pattern(value("f64", -Infinity), value("f64", -Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([123456789.01234567, 123456789.01234567])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([0.000000000012345678901234568, 0.000000000012345678901234568]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([0, 0])]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([-0, -0])]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
      -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014,
    ]),
  ]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([0.5, 0.5])]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([-0.5, -0.5])]),
  [new F64x2Pattern(value("f64", -0), value("f64", -0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([1, 1])]),
  [new F64x2Pattern(value("f64", 1), value("f64", 1))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([-1, -1])]),
  [new F64x2Pattern(value("f64", -1), value("f64", -1))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([6.283185307179586, 6.283185307179586])]),
  [new F64x2Pattern(value("f64", 6), value("f64", 6))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([-6.283185307179586, -6.283185307179586])]),
  [new F64x2Pattern(value("f64", -6), value("f64", -6))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    ]),
  ]),
  [
    new F64x2Pattern(
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
      value("f64", -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005,
    ]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([Infinity, Infinity])]),
  [new F64x2Pattern(value("f64", Infinity), value("f64", Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([-Infinity, -Infinity])]),
  [new F64x2Pattern(value("f64", -Infinity), value("f64", -Infinity))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([123456789, 123456789])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1234567890000000000000000000, 1234567890000000000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890000000000000000000),
      value("f64", 1234567890000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([0.0000000000123456789, 0.0000000000123456789]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([123456789.01234567, 123456789.01234567])]),
  [new F64x2Pattern(value("f64", 123456789), value("f64", 123456789))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1234567890123456900000000000, 1234567890123456900000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1234567890123456900000000000),
      value("f64", 1234567890123456900000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([0.000000000012345678901234568, 0.000000000012345678901234568]),
  ]),
  [new F64x2Pattern(value("f64", 0), value("f64", 0))],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([1375488932539311400000000, 1375488932539311400000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 1375488932539311400000000),
      value("f64", 1375488932539311400000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    f64x2([721152341463170500000000000000, 721152341463170500000000000000]),
  ]),
  [
    new F64x2Pattern(
      value("f64", 721152341463170500000000000000),
      value("f64", 721152341463170500000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [f64x2([2623536934927580700, 2623536934927580700])]),
  [
    new F64x2Pattern(
      value("f64", 2623536934927580700),
      value("f64", 2623536934927580700),
    ),
  ],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf8,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`canonical_nan`, `canonical_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0x7f,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_return(
  () => invoke($0, `f64x2.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0x0,
      0xf4,
      0xff,
    ]),
  ]),
  [new F64x2Pattern(`arithmetic_nan`, `arithmetic_nan`)],
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f64x2.ceil (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f64x2.floor (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f64x2.trunc (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f64x2.nearest (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f64x2.ceil-arg-empty (result v128)
      (f64x2.ceil)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f64x2.floor-arg-empty (result v128)
      (f64x2.floor)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f64x2.trunc-arg-empty (result v128)
      (f64x2.trunc)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f64x2.nearest-arg-empty (result v128)
      (f64x2.nearest)
    )
  )`),
  `type mismatch`,
);
