






let $0 = instantiate(`(module
  (func (export "f32x4.ceil") (param v128) (result v128) (f32x4.ceil (local.get 0)))
  (func (export "f32x4.floor") (param v128) (result v128) (f32x4.floor (local.get 0)))
  (func (export "f32x4.trunc") (param v128) (result v128) (f32x4.trunc (local.get 0)))
  (func (export "f32x4.nearest") (param v128) (result v128) (f32x4.nearest (local.get 0)))
)`);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855])]),
  [
    new F32x4Pattern(
      value("f32", 7),
      value("f32", 7),
      value("f32", 7),
      value("f32", 7),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([Infinity, Infinity, Infinity, Infinity])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([-Infinity, -Infinity, -Infinity, -Infinity])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.ceil`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855])]),
  [
    new F32x4Pattern(
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -7),
      value("f32", -7),
      value("f32", -7),
      value("f32", -7),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([Infinity, Infinity, Infinity, Infinity])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([-Infinity, -Infinity, -Infinity, -Infinity])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.floor`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855])]),
  [
    new F32x4Pattern(
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([Infinity, Infinity, Infinity, Infinity])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([-Infinity, -Infinity, -Infinity, -Infinity])]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [f32x4([123456790, 123456790, 123456790, 123456790])]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.trunc`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
      0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
      -0.000000000000000000000000000000000000000000001,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
      0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
      -0.000000000000000000000000000000000000011754944,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [f32x4([0.5, 0.5, 0.5, 0.5])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [f32x4([-0.5, -0.5, -0.5, -0.5])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
      value("f32", 6),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
      value("f32", -6),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
      340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
      -340282350000000000000000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [f32x4([Infinity, Infinity, Infinity, Infinity])]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([123456790, 123456790, 123456790, 123456790]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
      1234567900000000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
      0.000000000012345679,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([81985530000000000, 81985530000000000, 81985530000000000, 81985530000000000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
      42984030000000000000000,
    ]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
  ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
      0x0,
      0x0,
      0xc0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
      `canonical_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
      0x0,
      0x0,
      0xa0,
      0x7f,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_return(
  () => invoke($0, `f32x4.nearest`, [
    bytes('v128', [
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
      0x0,
      0x0,
      0xa0,
      0xff,
    ]),
  ]),
  [
    new F32x4Pattern(
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
      `arithmetic_nan`,
    ),
  ],
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i8x16.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i16x8.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i32x4.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.ceil (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.floor (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.trunc (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_malformed(
  () => instantiate(`(memory 1) (func (result v128) (i64x2.nearest (v128.const i32x4 0 0 0 0))) `),
  `unknown operator`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.ceil (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.floor (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.trunc (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (f32x4.nearest (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.ceil-arg-empty (result v128)
      (f32x4.ceil)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.floor-arg-empty (result v128)
      (f32x4.floor)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.trunc-arg-empty (result v128)
      (f32x4.trunc)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$f32x4.nearest-arg-empty (result v128)
      (f32x4.nearest)
    )
  )`),
  `type mismatch`,
);
