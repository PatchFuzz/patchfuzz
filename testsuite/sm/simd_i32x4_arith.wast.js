






let $0 = instantiate(`(module
  (func (export "i32x4.add") (param v128 v128) (result v128) (i32x4.add (local.get 0) (local.get 1)))
  (func (export "i32x4.sub") (param v128 v128) (result v128) (i32x4.sub (local.get 0) (local.get 1)))
  (func (export "i32x4.mul") (param v128 v128) (result v128) (i32x4.mul (local.get 0) (local.get 1)))
  (func (export "i32x4.neg") (param v128) (result v128) (i32x4.neg (local.get 0)))
)`);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x2, 0x2, 0x2, 0x2])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x3fffffff, 0x3fffffff, 0x3fffffff, 0x3fffffff]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xc0000001, 0xc0000001, 0xc0000001, 0xc0000001]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xbfffffff, 0xbfffffff, 0xbfffffff, 0xbfffffff]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7ffffffd, 0x7ffffffd, 0x7ffffffd, 0x7ffffffd]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000002, 0x80000002, 0x80000002, 0x80000002]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x3fffffff, 0x3fffffff, 0x3fffffff, 0x3fffffff]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xc0000001, 0xc0000001, 0xc0000001, 0xc0000001]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xbfffffff, 0xbfffffff, 0xbfffffff, 0xbfffffff]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i8x16([0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i16x8([0x0, 0x8000, 0x0, 0x8000, 0x0, 0x8000, 0x0, 0x8000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([0, 0, 0, 0]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([1, 1, 1, 1]),
  ]),
  [i32x4([0xbf800000, 0xbf800000, 0xbf800000, 0xbf800000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [i32x4([0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [i32x4([0x7f800001, 0x7f800001, 0x7f800001, 0x7f800001])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [i32x4([0xff800001, 0xff800001, 0xff800001, 0xff800001])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [i32x4([0x7fc00001, 0x7fc00001, 0x7fc00001, 0x7fc00001])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0xffffffff, 0xfffffffe, 0xfffffffd]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x2, 0x4, 0x6]),
  ]),
  [i32x4([0x0, 0x3, 0x6, 0x9])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x499602d2, 0x499602d2, 0x499602d2, 0x499602d2]),
    i32x4([0x499602d2, 0x499602d2, 0x499602d2, 0x499602d2]),
  ]),
  [i32x4([0x932c05a4, 0x932c05a4, 0x932c05a4, 0x932c05a4])],
);


assert_return(
  () => invoke($0, `i32x4.add`, [
    i32x4([0x12345678, 0x12345678, 0x12345678, 0x12345678]),
    i32x4([0x90abcdef, 0x90abcdef, 0x90abcdef, 0x90abcdef]),
  ]),
  [i32x4([0xa2e02467, 0xa2e02467, 0xa2e02467, 0xa2e02467])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x2, 0x2, 0x2, 0x2])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x3fffffff, 0x3fffffff, 0x3fffffff, 0x3fffffff]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xc0000001, 0xc0000001, 0xc0000001, 0xc0000001]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xbfffffff, 0xbfffffff, 0xbfffffff, 0xbfffffff]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7ffffffd, 0x7ffffffd, 0x7ffffffd, 0x7ffffffd]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7ffffffc, 0x7ffffffc, 0x7ffffffc, 0x7ffffffc])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7ffffffd, 0x7ffffffd, 0x7ffffffd, 0x7ffffffd])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000002, 0x80000002, 0x80000002, 0x80000002]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000003, 0x80000003, 0x80000003, 0x80000003])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000002, 0x80000002, 0x80000002, 0x80000002])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x3fffffff, 0x3fffffff, 0x3fffffff, 0x3fffffff]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xc0000001, 0xc0000001, 0xc0000001, 0xc0000001]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xbfffffff, 0xbfffffff, 0xbfffffff, 0xbfffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0xfffffffe, 0xfffffffe, 0xfffffffe, 0xfffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i8x16([0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i32x4([0x2, 0x2, 0x2, 0x2])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i16x8([0x0, 0x8000, 0x0, 0x8000, 0x0, 0x8000, 0x0, 0x8000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x2, 0x2, 0x2, 0x2])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([0, 0, 0, 0]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([1, 1, 1, 1]),
  ]),
  [i32x4([0x40800000, 0x40800000, 0x40800000, 0x40800000])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [i32x4([0xc0800000, 0xc0800000, 0xc0800000, 0xc0800000])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [i32x4([0x80800001, 0x80800001, 0x80800001, 0x80800001])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [i32x4([0x800001, 0x800001, 0x800001, 0x800001])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [i32x4([0x80400001, 0x80400001, 0x80400001, 0x80400001])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0xffffffff, 0xfffffffe, 0xfffffffd]),
  ]),
  [i32x4([0x0, 0x2, 0x4, 0x6])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x2, 0x4, 0x6]),
  ]),
  [i32x4([0x0, 0xffffffff, 0xfffffffe, 0xfffffffd])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0xbf9a69d2, 0xbf9a69d2, 0xbf9a69d2, 0xbf9a69d2]),
    i32x4([0x499602d2, 0x499602d2, 0x499602d2, 0x499602d2]),
  ]),
  [i32x4([0x76046700, 0x76046700, 0x76046700, 0x76046700])],
);


assert_return(
  () => invoke($0, `i32x4.sub`, [
    i32x4([0x90abcdef, 0x90abcdef, 0x90abcdef, 0x90abcdef]),
    i32x4([0x12345678, 0x12345678, 0x12345678, 0x12345678]),
  ]),
  [i32x4([0x7e777777, 0x7e777777, 0x7e777777, 0x7e777777])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x0, 0x0, 0x0, 0x0]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x3fffffff, 0x3fffffff, 0x3fffffff, 0x3fffffff]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xc0000001, 0xc0000001, 0xc0000001, 0xc0000001]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xbfffffff, 0xbfffffff, 0xbfffffff, 0xbfffffff]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x7ffffffd, 0x7ffffffd, 0x7ffffffd, 0x7ffffffd]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7ffffffd, 0x7ffffffd, 0x7ffffffd, 0x7ffffffd])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000002, 0x80000002, 0x80000002, 0x80000002]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x3fffffff, 0x3fffffff, 0x3fffffff, 0x3fffffff]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
    i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xc0000001, 0xc0000001, 0xc0000001, 0xc0000001]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000]),
    i32x4([0xbfffffff, 0xbfffffff, 0xbfffffff, 0xbfffffff]),
  ]),
  [i32x4([0x40000000, 0x40000000, 0x40000000, 0x40000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x10000000, 0x10000000, 0x10000000, 0x10000000]),
    i8x16([0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
    i16x8([0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x8000, 0x8000, 0x8000, 0x8000]),
    f32x4([0, 0, 0, 0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x8000, 0x8000, 0x8000, 0x8000]),
    f32x4([-0, -0, -0, -0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x8000, 0x8000, 0x8000, 0x8000]),
    f32x4([1, 1, 1, 1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x8000, 0x8000, 0x8000, 0x8000]),
    f32x4([-1, -1, -1, -1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    f32x4([Infinity, Infinity, Infinity, Infinity]),
  ]),
  [i32x4([0x7f800000, 0x7f800000, 0x7f800000, 0x7f800000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
  ]),
  [i32x4([0xff800000, 0xff800000, 0xff800000, 0xff800000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x1, 0x1, 0x1, 0x1]),
    bytes('v128', [
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
      0x0,
      0x0,
      0xc0,
      0x7f,
    ]),
  ]),
  [i32x4([0x7fc00000, 0x7fc00000, 0x7fc00000, 0x7fc00000])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0xffffffff, 0xfffffffe, 0xfffffffd]),
  ]),
  [i32x4([0x0, 0xffffffff, 0xfffffffc, 0xfffffff7])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x2, 0x4, 0x6]),
  ]),
  [i32x4([0x0, 0x2, 0x8, 0x12])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x75bcd15, 0x75bcd15, 0x75bcd15, 0x75bcd15]),
    i32x4([0x3ade68b1, 0x3ade68b1, 0x3ade68b1, 0x3ade68b1]),
  ]),
  [i32x4([0xfbff5385, 0xfbff5385, 0xfbff5385, 0xfbff5385])],
);


assert_return(
  () => invoke($0, `i32x4.mul`, [
    i32x4([0x12345678, 0x12345678, 0x12345678, 0x12345678]),
    i32x4([0x90abcdef, 0x90abcdef, 0x90abcdef, 0x90abcdef]),
  ]),
  [i32x4([0x2a42d208, 0x2a42d208, 0x2a42d208, 0x2a42d208])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [i32x4([0x1, 0x1, 0x1, 0x1])]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7ffffffe, 0x7ffffffe]),
  ]),
  [i32x4([0x80000002, 0x80000002, 0x80000002, 0x80000002])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [i32x4([0x1, 0x1, 0x1, 0x1])]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001]),
  ]),
  [i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i32x4([0x80000001, 0x80000001, 0x80000001, 0x80000001])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000])],
);


assert_return(
  () => invoke($0, `i32x4.neg`, [
    i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.neg (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.add (i32.const 0) (f32.const 0.0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.sub (i32.const 0) (f32.const 0.0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.mul (i32.const 0) (f32.const 0.0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.neg-arg-empty (result v128)
      (i32x4.neg)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.add-1st-arg-empty (result v128)
      (i32x4.add (v128.const i32x4 0 0 0 0))
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.add-arg-empty (result v128)
      (i32x4.add)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.sub-1st-arg-empty (result v128)
      (i32x4.sub (v128.const i32x4 0 0 0 0))
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.sub-arg-empty (result v128)
      (i32x4.sub)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.mul-1st-arg-empty (result v128)
      (i32x4.mul (v128.const i32x4 0 0 0 0))
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.mul-arg-empty (result v128)
      (i32x4.mul)
    )
  )`),
  `type mismatch`,
);


let $1 = instantiate(`(module
  (func (export "add-sub") (param v128 v128 v128) (result v128)
    (i32x4.add (i32x4.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-add") (param v128 v128 v128) (result v128)
    (i32x4.mul (i32x4.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-sub") (param v128 v128 v128) (result v128)
    (i32x4.mul (i32x4.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "sub-add") (param v128 v128 v128) (result v128)
    (i32x4.sub (i32x4.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "add-neg") (param v128 v128) (result v128)
    (i32x4.add (i32x4.neg (local.get 0)) (local.get 1)))
  (func (export "mul-neg") (param v128 v128) (result v128)
    (i32x4.mul (i32x4.neg (local.get 0)) (local.get 1)))
  (func (export "sub-neg") (param v128 v128) (result v128)
    (i32x4.sub (i32x4.neg (local.get 0)) (local.get 1)))
)`);


assert_return(
  () => invoke($1, `add-sub`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x2, 0x4, 0x6]),
    i32x4([0x0, 0x2, 0x4, 0x6]),
  ]),
  [i32x4([0x0, 0x1, 0x2, 0x3])],
);


assert_return(
  () => invoke($1, `mul-add`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x2, 0x2, 0x2, 0x2]),
  ]),
  [i32x4([0x0, 0x4, 0x8, 0xc])],
);


assert_return(
  () => invoke($1, `mul-sub`, [
    i32x4([0x0, 0x2, 0x4, 0x6]),
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x1, 0x2, 0x3]),
  ]),
  [i32x4([0x0, 0x1, 0x4, 0x9])],
);


assert_return(
  () => invoke($1, `sub-add`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x2, 0x4, 0x6]),
    i32x4([0x0, 0x2, 0x4, 0x6]),
  ]),
  [i32x4([0x0, 0x1, 0x2, 0x3])],
);


assert_return(
  () => invoke($1, `add-neg`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x1, 0x2, 0x3]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($1, `mul-neg`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x2, 0x2, 0x2, 0x2]),
  ]),
  [i32x4([0x0, 0xfffffffe, 0xfffffffc, 0xfffffffa])],
);


assert_return(
  () => invoke($1, `sub-neg`, [
    i32x4([0x0, 0x1, 0x2, 0x3]),
    i32x4([0x0, 0x1, 0x2, 0x3]),
  ]),
  [i32x4([0x0, 0xfffffffe, 0xfffffffc, 0xfffffffa])],
);
