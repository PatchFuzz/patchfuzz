






let $0 = instantiate(`(module
  (func (export "i16x8.extend_high_i8x16_s") (param v128) (result v128) (i16x8.extend_high_i8x16_s (local.get 0)))
  (func (export "i16x8.extend_high_i8x16_u") (param v128) (result v128) (i16x8.extend_high_i8x16_u (local.get 0)))
  (func (export "i16x8.extend_low_i8x16_s") (param v128) (result v128) (i16x8.extend_low_i8x16_s (local.get 0)))
  (func (export "i16x8.extend_low_i8x16_u") (param v128) (result v128) (i16x8.extend_low_i8x16_u (local.get 0)))
  (func (export "i32x4.extend_high_i16x8_s") (param v128) (result v128) (i32x4.extend_high_i16x8_s (local.get 0)))
  (func (export "i32x4.extend_high_i16x8_u") (param v128) (result v128) (i32x4.extend_high_i16x8_u (local.get 0)))
  (func (export "i32x4.extend_low_i16x8_s") (param v128) (result v128) (i32x4.extend_low_i16x8_s (local.get 0)))
  (func (export "i32x4.extend_low_i16x8_u") (param v128) (result v128) (i32x4.extend_low_i16x8_u (local.get 0)))
  (func (export "i64x2.extend_high_i32x4_s") (param v128) (result v128) (i64x2.extend_high_i32x4_s (local.get 0)))
  (func (export "i64x2.extend_high_i32x4_u") (param v128) (result v128) (i64x2.extend_high_i32x4_u (local.get 0)))
  (func (export "i64x2.extend_low_i32x4_s") (param v128) (result v128) (i64x2.extend_low_i32x4_s (local.get 0)))
  (func (export "i64x2.extend_low_i32x4_u") (param v128) (result v128) (i64x2.extend_low_i32x4_u (local.get 0)))
)`);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e]),
  ]),
  [i16x8([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81]),
  ]),
  [i16x8([0xff81, 0xff81, 0xff81, 0xff81, 0xff81, 0xff81, 0xff81, 0xff81])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e]),
  ]),
  [i16x8([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81]),
  ]),
  [i16x8([0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_high_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xff81, 0xff81, 0xff81, 0xff81, 0xff81, 0xff81, 0xff81, 0xff81])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80, 0xff80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_s`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
  ]),
  [i16x8([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])],
);


assert_return(
  () => invoke($0, `i16x8.extend_low_i8x16_u`, [
    i8x16([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]),
  ]),
  [i16x8([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe]),
  ]),
  [i32x4([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x8001, 0x8001, 0x8001, 0x8001, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8001, 0x8001, 0x8001]),
  ]),
  [i32x4([0xffff8001, 0xffff8001, 0xffff8001, 0xffff8001])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe]),
  ]),
  [i32x4([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x8001, 0x8001, 0x8001, 0x8001, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8001, 0x8001, 0x8001]),
  ]),
  [i32x4([0x8001, 0x8001, 0x8001, 0x8001])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_high_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x8001, 0x8001, 0x8001, 0x8001, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffff8001, 0xffff8001, 0xffff8001, 0xffff8001])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8001, 0x8001, 0x8001]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_s`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x0, 0x0, 0x0, 0x0])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x1, 0x1, 0x1, 0x1, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x1, 0x1, 0x1, 0x1])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x1, 0x1, 0x1, 0x1]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7ffe, 0x7ffe, 0x7ffe, 0x7ffe]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x7fff, 0x7fff, 0x7fff, 0x7fff, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x7fff, 0x7fff, 0x7fff, 0x7fff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x7fff, 0x7fff, 0x7fff, 0x7fff]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x8001, 0x8001, 0x8001, 0x8001, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0x8001, 0x8001, 0x8001, 0x8001])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8001, 0x8001, 0x8001]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0x8000, 0x8000, 0x8000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff]),
  ]),
  [i32x4([0x8000, 0x8000, 0x8000, 0x8000])],
);


assert_return(
  () => invoke($0, `i32x4.extend_low_i16x8_u`, [
    i16x8([0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x8000, 0x8000, 0x8000]),
  ]),
  [i32x4([0xffff, 0xffff, 0xffff, 0xffff])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [i32x4([0x0, 0x0, 0x1, 0x1])]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x0, 0x0, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [i32x4([0x1, 0x1, 0x0, 0x0])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x0, 0x0]),
  ]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x1, 0x1, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x1, 0x1]),
  ]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7ffffffe, 0x7ffffffe]),
  ]),
  [i64x2([0x7ffffffen, 0x7ffffffen])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x80000001, 0x80000001, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0x80000001, 0x80000001]),
  ]),
  [i64x2([0xffffffff80000001n, 0xffffffff80000001n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [i32x4([0x0, 0x0, 0x1, 0x1])]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x0, 0x0, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [i32x4([0x1, 0x1, 0x0, 0x0])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x0, 0x0]),
  ]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x1, 0x1, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x1, 0x1]),
  ]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7ffffffe, 0x7ffffffe]),
  ]),
  [i64x2([0x7ffffffen, 0x7ffffffen])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x80000001, 0x80000001, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0x80000001, 0x80000001]),
  ]),
  [i64x2([0x80000001n, 0x80000001n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_high_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [i32x4([0x0, 0x0, 0x1, 0x1])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x0, 0x0, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [i32x4([0x1, 0x1, 0x0, 0x0])]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x0, 0x0]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x1, 0x1, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x1, 0x1]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7ffffffen, 0x7ffffffen])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7ffffffe, 0x7ffffffe]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x7fffffff, 0x7fffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x80000001, 0x80000001, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffff80000001n, 0xffffffff80000001n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0x80000001, 0x80000001]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0x80000000, 0x80000000, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0xffffffff80000000n, 0xffffffff80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_s`, [
    i32x4([0xffffffff, 0xffffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffffffffffffn, 0xffffffffffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [i32x4([0x0, 0x0, 0x0, 0x0])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [i32x4([0x0, 0x0, 0x1, 0x1])]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x0, 0x0, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0x0n, 0x0n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [i32x4([0x1, 0x1, 0x0, 0x0])]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x0, 0x0]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x1, 0x1, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0x1n, 0x1n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x1, 0x1]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x7ffffffe, 0x7ffffffe, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7ffffffen, 0x7ffffffen])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7ffffffe, 0x7ffffffe]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x7fffffff, 0x7fffffff, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0x7fffffffn, 0x7fffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x7fffffff, 0x7fffffff]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x80000001, 0x80000001, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0x80000001n, 0x80000001n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0x80000001, 0x80000001]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0x80000000, 0x80000000, 0xffffffff, 0xffffffff]),
  ]),
  [i64x2([0x80000000n, 0x80000000n])],
);


assert_return(
  () => invoke($0, `i64x2.extend_low_i32x4_u`, [
    i32x4([0xffffffff, 0xffffffff, 0x80000000, 0x80000000]),
  ]),
  [i64x2([0xffffffffn, 0xffffffffn])],
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i16x8.extend_high_i8x16_s (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i16x8.extend_high_i8x16_u (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i16x8.extend_low_i8x16_s (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i16x8.extend_low_i8x16_u (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.extend_high_i16x8_s (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.extend_high_i16x8_u (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.extend_low_i16x8_s (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i32x4.extend_low_i16x8_u (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i64x2.extend_high_i32x4_s (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i64x2.extend_high_i32x4_u (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i64x2.extend_low_i32x4_s (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module (func (result v128) (i64x2.extend_low_i32x4_u (i32.const 0))))`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i16x8.extend_high_i8x16_s-arg-empty (result v128)
      (i16x8.extend_high_i8x16_s)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i16x8.extend_high_i8x16_u-arg-empty (result v128)
      (i16x8.extend_high_i8x16_u)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i16x8.extend_low_i8x16_s-arg-empty (result v128)
      (i16x8.extend_low_i8x16_s)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i16x8.extend_low_i8x16_u-arg-empty (result v128)
      (i16x8.extend_low_i8x16_u)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.extend_high_i16x8_s-arg-empty (result v128)
      (i32x4.extend_high_i16x8_s)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.extend_high_i16x8_u-arg-empty (result v128)
      (i32x4.extend_high_i16x8_u)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.extend_low_i16x8_s-arg-empty (result v128)
      (i32x4.extend_low_i16x8_s)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i32x4.extend_low_i16x8_u-arg-empty (result v128)
      (i32x4.extend_low_i16x8_u)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i64x2.extend_high_i32x4_s-arg-empty (result v128)
      (i64x2.extend_high_i32x4_s)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i64x2.extend_high_i32x4_u-arg-empty (result v128)
      (i64x2.extend_high_i32x4_u)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i64x2.extend_low_i32x4_s-arg-empty (result v128)
      (i64x2.extend_low_i32x4_s)
    )
  )`),
  `type mismatch`,
);


assert_invalid(
  () => instantiate(`(module
    (func $$i64x2.extend_low_i32x4_u-arg-empty (result v128)
      (i64x2.extend_low_i32x4_u)
    )
  )`),
  `type mismatch`,
);
